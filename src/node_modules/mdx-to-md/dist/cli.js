#!/usr/bin/env node
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/cli.ts
var import_path2 = require("path");
var import_promises2 = require("fs/promises");

// src/mdx-to-md.ts
var import_node_html_markdown = require("node-html-markdown");
var import_mdx_bundler = require("mdx-bundler");
var import_client = require("mdx-bundler/client");
var import_react = require("react");
var import_server = require("react-dom/server");
var import_promises = require("fs/promises");
var import_path = require("path");
var htmlToMarkdown = new import_node_html_markdown.NodeHtmlMarkdown();
async function mdxToMd(path, options) {
  const contents = await (0, import_promises.readFile)(path, "utf-8");
  const { code } = await (0, import_mdx_bundler.bundleMDX)(__spreadValues({ source: contents, cwd: (0, import_path.dirname)(path) }, options));
  const component = (0, import_client.getMDXComponent)(code);
  const element = (0, import_react.createElement)(component);
  const html = (0, import_server.renderToString)(element);
  const markdown = htmlToMarkdown.translate(html);
  return markdown;
}

// src/cli.ts
var import_chokidar = require("chokidar");
var import_args_flags = require("args-flags");
var [sourcePath, outPath = (0, import_path2.basename)(sourcePath).slice(0, -1)] = import_args_flags.args;
var sourceMDX = (0, import_path2.resolve)(import_args_flags.flags.cwd ?? process.cwd(), sourcePath);
async function build() {
  const markdown = await mdxToMd(sourceMDX);
  const banner = `This markdown file was auto-generated from "${sourcePath}"`;
  const contents = `<!--- ${banner} -->

${markdown}`;
  await (0, import_promises2.writeFile)(outPath, contents);
  console.log(`\u{1F4DD} Converted ${sourcePath} -> ${outPath}`);
}
if (import_args_flags.flags.watch) {
  (0, import_chokidar.watch)(sourceMDX).on("change", build);
} else {
  build();
}
